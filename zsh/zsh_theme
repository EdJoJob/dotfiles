# vim: fdm=marker

# THEME --------------------------------{{{
# theme vars {{{
# Default values for the appearance of the prompt. Configure at will.
ZSH_THEME_PREFIX="%{$fg_bold[black]%}%{[%G%}"
ZSH_THEME_SUFFIX="%{$fg_bold[black]%}%{]%G%}"
ZSH_THEME_SEPARATOR="%{$fg_bold[black]%}%{|%G%}"
ZSH_THEME_BRANCH="%{$fg_bold[green]%}"
ZSH_THEME_MASTER="%{$fg_bold[red]%}"
ZSH_THEME_STAGED="%{$fg[green]%}%{●%G%}"
ZSH_THEME_CONFLICTS="%{$fg[red]%}%{≠%G%}"
ZSH_THEME_CHANGED="%{$fg[red]%}%{⚡%G%}"
ZSH_THEME_BEHIND="%{$fg[red]↓%G%}"
ZSH_THEME_AHEAD="%{$fg[green]↑%G%}"
ZSH_THEME_UNTRACKED="%{$fg[yellow]…%G%}"
ZSH_THEME_CLEAN="%{$fg_bold[green]%}%{✔%G%}"
ZSH_THEME_REPO_COLOR="%{$fg_bold[cyan]%}"
# }}}

# ↑ ✔ green
# ↓ ⚡  red
# ♦ … ≠ ":" yellow
# [$branch|status|remote]

function git_info() { # {{{
    precmd_update_git_vars

    if [ -n "$__CURRENT_GIT_STATUS" ]; then
        local git
        git="±%{$reset_color%}"
        STATUS="$ZSH_THEME_PREFIX$ZSH_THEME_REPO_COLOR$git$ZSH_THEME_SEPARATOR"

        if [[ "$GIT_BRANCH" == "master" ]]; then
            STATUS="$STATUS$ZSH_THEME_MASTER$GIT_BRANCH%{${reset_color}%}"
        else
            STATUS="$STATUS$ZSH_THEME_BRANCH$GIT_BRANCH%{${reset_color}%}"
        fi
        STATUS="$STATUS$ZSH_THEME_SEPARATOR"
        if [ "$GIT_STAGED" -ne "0" ]; then
            STATUS="$STATUS$ZSH_THEME_STAGED%{${reset_color}%}$GIT_STAGED"
        fi
        if [ "$GIT_UNTRACKED" -ne "0" ]; then
            STATUS="$STATUS$ZSH_THEME_UNTRACKED%{${reset_color}%}"
        fi
        if [ "$GIT_CONFLICTS" -ne "0" ]; then
            STATUS="$STATUS$ZSH_THEME_CONFLICTS%{${reset_color}%}$GIT_CONFLICTS"
        fi
        if [ "$GIT_CHANGED" -ne "0" ]; then
            STATUS="$STATUS$ZSH_THEME_CHANGED%{${reset_color}%}$GIT_CHANGED"
        fi
        if [ "$GIT_CHANGED" -eq "0" ] && [ "$GIT_CONFLICTS" -eq "0" ] && [ "$GIT_STAGED" -eq "0" ] && [ "$GIT_UNTRACKED" -eq "0" ]; then
            STATUS="$STATUS$ZSH_THEME_CLEAN"
        fi
        STATUS="$STATUS$ZSH_THEME_SEPARATOR"
        if [ "$GIT_BEHIND" -ne "0" ]; then
            STATUS="$STATUS$ZSH_THEME_BEHIND%{${reset_color}%}$GIT_BEHIND"
        fi
        if [ "$GIT_AHEAD" -ne "0" ]; then
            STATUS="$STATUS$ZSH_THEME_AHEAD%{${reset_color}%}$GIT_AHEAD"
        fi
        if [ "$GIT_BEHIND" -eq "0" ] && [ "$GIT_AHEAD" -eq "0" ]; then
            STATUS="$STATUS$ZSH_THEME_CLEAN%{${reset_color}%}"
        fi
        STATUS="$STATUS%{${reset_color}%}$ZSH_THEME_SUFFIX"
        echo -n "$STATUS"
    fi
} #}}}
in-bone() { # {{{
    if [[ -n $BONE_CONFLICT ]]; then
        echo "$ZSH_THEME_PREFIX%{$fg[red]%}BONES%{$reset_color%}$ZSH_THEME_SUFFIX"
    fi
} #}}}
has-cluster() { #{{{
    if [[ -n $CLUSTER ]]; then
        echo "$ZSH_THEME_PREFIX%{$fg[cyan]%}☣$ZSH_THEME_SEPARATOR%{$fg[cyan]%}${CLUSTER}%{$reset_color%}$ZSH_THEME_SUFFIX"
    fi
} #}}}
in-virtualenv() { #{{{
    if [[ -n $VIRTUAL_ENV ]]; then
        echo -n "${ZSH_THEME_PREFIX}${ZSH_THEME_REPO_COLOR}§$ZSH_THEME_SEPARATOR%{$FG[009]%}${${(s:/:)VIRTUAL_ENV}[-1]}%{$reset_color%}$ZSH_THEME_SUFFIX"
    fi
} #}}}
# Setup vim mode and rprompt {{{
function zle-line-init zle-keymap-select {
    VIM_PROMPT="$prompt_l_sqparen%b%F{yellow}NORMAL$prompt_r_sqparen"
    RPROMPT="${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/}$(has-cluster)$(in-virtualenv)$(in-bone)$(git_info)"
    zle reset-prompt
}

zle -N zle-line-init
zle -N zle-keymap-select
export KEYTIMEOUT=1
bindkey -v
#}}}
#prompt {{{
prompt_adam2_setup () { #{{{
    # Some can't be local
    local prompt_gfx_tlc prompt_gfx_blc

    prompt_start=$'%{\e(0%}'
    prompt_end=$'%{\e(B%}'
    prompt_gfx_tlc=$prompt_start┌$prompt_end
    prompt_gfx_blc=$prompt_start└$prompt_end
    prompt_gfx_hyphen=─
    local phyph=$prompt_start$prompt_gfx_hyphen$prompt_end


    case $HOST in #hyphens
        (*C02QP6H2G8WN*|EdMac*|EdwardMacPro*)
            prompt_adam2_color1=${1:-'blue'};; # blue
        (raspberrypi|black-pearl)
            prompt_adam2_color1=${1:-'198'};; # pink
        (*)
            prompt_adam2_color1=${1:-'154'};; # lime
    esac
    # Colour scheme
    prompt_adam2_color2=${2:-'green'}   # current directory
    prompt_adam2_color3=${3:-'cyan'}    # user@host
    prompt_adam2_color4=${4:-'243'}   # user input

    local prompt_gfx_bbox
    prompt_gfx_tbox="%B%F{$prompt_adam2_color1}${prompt_gfx_tlc}%b%F{$prompt_adam2_color1}${phyph}"
    prompt_gfx_bbox="%B%F{$prompt_adam2_color1}${prompt_gfx_blc}%b%F{$prompt_adam2_color1}${phyph}"

    # This is a cute hack.  Well I like it, anyway.

    prompt_l_paren="%B%F{246}("
    prompt_r_paren="%B%F{246})"
    prompt_l_sqparen="%B%F{246}["
    prompt_r_sqparen="%B%F{246}]"

    prompt_user_host="%b%F{$prompt_adam2_color3}%n%B%F{$prompt_adam2_color3}@%b%F{$prompt_adam2_color3}%m"
    prompt_shell_level="%B%F{yellow}l:$SHLVL%B%F{246}"
    prompt_jobs="%B%F{yellow}j:%j%B%F{246}"

    prompt_line_1a="$prompt_gfx_tbox$prompt_l_paren%B%F{$prompt_adam2_color2}%~$prompt_r_paren%b%F{$prompt_adam2_color1}"
    prompt_line_1b="%B%F{246}[%B%F{yellow}%D{%H:%M}%B%F{246}|$prompt_user_host%B%F{246}|$prompt_shell_level $prompt_jobs]%b%F{$prompt_adam2_color1}${phyph}"

    prompt_line_2="$prompt_gfx_bbox$prompt_l_sqparen%b%F{white}%?$prompt_r_sqparen%b%F{$prompt_adam2_color1}${phyph}%b%F{white}"

    prompt_char="%(!.#.>)"

    prompt_opts=(cr subst percent)

} #}}}
precmd() { #{{{
    local prompt_line_1

    prompt_adam2_choose_prompt

    print -rP "$prompt_line_1"
    PS1="$prompt_line_2%b%F{white}$prompt_char %b%f%k"
    PS2="$prompt_line_2$prompt_gfx_bbox_to_mbox%b%F{white}%_> %b%f%k"
    PS3="$prompt_line_2$prompt_gfx_bbox_to_mbox%b%F{white}?# %b%f%k"

    zle_highlight[(r)default:*]="default:fg=$prompt_adam2_color4"
} #}}}
prompt_adam2_choose_prompt () { #{{{
    local prompt_line_1a_width=${#${(S%%)prompt_line_1a//(\%([KF1]|)\{*\}|\%[Bbkf])}}
    local prompt_line_1b_width=${#${(S%%)prompt_line_1b//(\%([KF1]|)\{*\}|\%[Bbkf])}}

    local prompt_padding_size=$(( COLUMNS
    - prompt_line_1a_width
    - prompt_line_1b_width ))

    # Try to fit in long path and user@host.
    if (( prompt_padding_size > 0 )); then
        local prompt_padding
        eval "prompt_padding=\${(l:${prompt_padding_size}::${prompt_gfx_hyphen}:)_empty_zz}"
        prompt_line_1="$prompt_line_1a$prompt_start$prompt_padding$prompt_end$prompt_line_1b"
        return
    fi

    prompt_padding_size=$(( COLUMNS - prompt_line_1a_width ))

    # Didn't fit; try to fit in just long path.
    if (( prompt_padding_size > 0 )); then
        local prompt_padding
        eval "prompt_padding=\${(l:${prompt_padding_size}::${prompt_gfx_hyphen}:)_empty_zz}"
        prompt_line_1="$prompt_line_1a$prompt_start$prompt_padding$prompt_end"
        return
    fi

    # Still didn't fit; truncate
    local prompt_pwd_size=$(( COLUMNS - 5 ))
    prompt_line_1="$prompt_gfx_tbox$prompt_l_paren%B%F{$prompt_adam2_color2}%$prompt_pwd_size<...<%~%<<$prompt_r_paren%b%F{$prompt_adam2_color1}$prompt_start$prompt_gfx_hyphen$prompt_end"
} #}}}
preexec() { #{{{
    print -Pn "%B%F{}Start %D{%H:%M:%S}\n%b%f%k"
} #}}}
prompt_adam2_setup
#}}}
#}}}
